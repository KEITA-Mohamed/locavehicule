"use strict";
(self["webpackChunk"] = self["webpackChunk"] || []).push([["vendors-node_modules_find-cache-dir_index_js"],{

/***/ "./node_modules/common-path-prefix/index.js":
/*!**************************************************!*\
  !*** ./node_modules/common-path-prefix/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


const { sep: DEFAULT_SEPARATOR } = __webpack_require__(Object(function webpackMissingModule() { var e = new Error("Cannot find module 'path'"); e.code = 'MODULE_NOT_FOUND'; throw e; }()))

const determineSeparator = paths => {
  for (const path of paths) {
    const match = /(\/|\\)/.exec(path)
    if (match !== null) return match[0]
  }

  return DEFAULT_SEPARATOR
}

module.exports = function commonPathPrefix (paths, sep = determineSeparator(paths)) {
  const [first = '', ...remaining] = paths
  if (first === '' || remaining.length === 0) return ''

  const parts = first.split(sep)

  let endOfPrefix = parts.length
  for (const path of remaining) {
    const compare = path.split(sep)
    for (let i = 0; i < endOfPrefix; i++) {
      if (compare[i] !== parts[i]) {
        endOfPrefix = i
      }
    }

    if (endOfPrefix === 0) return ''
  }

  const prefix = parts.slice(0, endOfPrefix).join(sep)
  return prefix.endsWith(sep) ? prefix : prefix + sep
}


/***/ }),

/***/ "./node_modules/find-cache-dir/index.js":
/*!**********************************************!*\
  !*** ./node_modules/find-cache-dir/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ findCacheDirectory)
/* harmony export */ });
/* harmony import */ var node_process__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:process */ "node:process");
/* harmony import */ var node_path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:path */ "node:path");
/* harmony import */ var node_fs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:fs */ "node:fs");
/* harmony import */ var common_path_prefix__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! common-path-prefix */ "./node_modules/common-path-prefix/index.js");
/* harmony import */ var pkg_dir__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! pkg-dir */ "./node_modules/pkg-dir/index.js");






const {env, cwd} = node_process__WEBPACK_IMPORTED_MODULE_0__;

const isWritable = path => {
	try {
		node_fs__WEBPACK_IMPORTED_MODULE_2__.accessSync(path, node_fs__WEBPACK_IMPORTED_MODULE_2__.constants.W_OK);
		return true;
	} catch {
		return false;
	}
};

function useDirectory(directory, options) {
	if (options.create) {
		node_fs__WEBPACK_IMPORTED_MODULE_2__.mkdirSync(directory, {recursive: true});
	}

	if (options.thunk) {
		return (...arguments_) => node_path__WEBPACK_IMPORTED_MODULE_1__.join(directory, ...arguments_);
	}

	return directory;
}

function getNodeModuleDirectory(directory) {
	const nodeModules = node_path__WEBPACK_IMPORTED_MODULE_1__.join(directory, 'node_modules');

	if (
		!isWritable(nodeModules)
			&& (node_fs__WEBPACK_IMPORTED_MODULE_2__.existsSync(nodeModules) || !isWritable(node_path__WEBPACK_IMPORTED_MODULE_1__.join(directory)))
	) {
		return;
	}

	return nodeModules;
}

function findCacheDirectory(options = {}) {
	if (env.CACHE_DIR && !['true', 'false', '1', '0'].includes(env.CACHE_DIR)) {
		return useDirectory(node_path__WEBPACK_IMPORTED_MODULE_1__.join(env.CACHE_DIR, options.name), options);
	}

	let {cwd: directory = cwd()} = options;

	if (options.files) {
		directory = common_path_prefix__WEBPACK_IMPORTED_MODULE_3__(options.files.map(file => node_path__WEBPACK_IMPORTED_MODULE_1__.resolve(directory, file)));
	}

	directory = (0,pkg_dir__WEBPACK_IMPORTED_MODULE_4__.packageDirectorySync)({cwd: directory});

	if (!directory) {
		return;
	}

	const nodeModules = getNodeModuleDirectory(directory);
	if (!nodeModules) {
		return;
	}

	return useDirectory(node_path__WEBPACK_IMPORTED_MODULE_1__.join(directory, 'node_modules', '.cache', options.name), options);
}


/***/ }),

/***/ "./node_modules/find-up/index.js":
/*!***************************************!*\
  !*** ./node_modules/find-up/index.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   findUp: () => (/* binding */ findUp),
/* harmony export */   findUpMultiple: () => (/* binding */ findUpMultiple),
/* harmony export */   findUpMultipleSync: () => (/* binding */ findUpMultipleSync),
/* harmony export */   findUpStop: () => (/* binding */ findUpStop),
/* harmony export */   findUpSync: () => (/* binding */ findUpSync),
/* harmony export */   pathExists: () => (/* reexport safe */ path_exists__WEBPACK_IMPORTED_MODULE_3__.pathExists),
/* harmony export */   pathExistsSync: () => (/* reexport safe */ path_exists__WEBPACK_IMPORTED_MODULE_3__.pathExistsSync)
/* harmony export */ });
/* harmony import */ var node_path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:path */ "node:path");
/* harmony import */ var node_url__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:url */ "node:url");
/* harmony import */ var locate_path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! locate-path */ "./node_modules/locate-path/index.js");
/* harmony import */ var path_exists__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! path-exists */ "./node_modules/path-exists/index.js");




const toPath = urlOrPath => urlOrPath instanceof URL ? (0,node_url__WEBPACK_IMPORTED_MODULE_1__.fileURLToPath)(urlOrPath) : urlOrPath;

const findUpStop = Symbol('findUpStop');

async function findUpMultiple(name, options = {}) {
	let directory = node_path__WEBPACK_IMPORTED_MODULE_0__.resolve(toPath(options.cwd) || '');
	const {root} = node_path__WEBPACK_IMPORTED_MODULE_0__.parse(directory);
	const stopAt = node_path__WEBPACK_IMPORTED_MODULE_0__.resolve(directory, options.stopAt || root);
	const limit = options.limit || Number.POSITIVE_INFINITY;
	const paths = [name].flat();

	const runMatcher = async locateOptions => {
		if (typeof name !== 'function') {
			return (0,locate_path__WEBPACK_IMPORTED_MODULE_2__.locatePath)(paths, locateOptions);
		}

		const foundPath = await name(locateOptions.cwd);
		if (typeof foundPath === 'string') {
			return (0,locate_path__WEBPACK_IMPORTED_MODULE_2__.locatePath)([foundPath], locateOptions);
		}

		return foundPath;
	};

	const matches = [];
	// eslint-disable-next-line no-constant-condition
	while (true) {
		// eslint-disable-next-line no-await-in-loop
		const foundPath = await runMatcher({...options, cwd: directory});

		if (foundPath === findUpStop) {
			break;
		}

		if (foundPath) {
			matches.push(node_path__WEBPACK_IMPORTED_MODULE_0__.resolve(directory, foundPath));
		}

		if (directory === stopAt || matches.length >= limit) {
			break;
		}

		directory = node_path__WEBPACK_IMPORTED_MODULE_0__.dirname(directory);
	}

	return matches;
}

function findUpMultipleSync(name, options = {}) {
	let directory = node_path__WEBPACK_IMPORTED_MODULE_0__.resolve(toPath(options.cwd) || '');
	const {root} = node_path__WEBPACK_IMPORTED_MODULE_0__.parse(directory);
	const stopAt = options.stopAt || root;
	const limit = options.limit || Number.POSITIVE_INFINITY;
	const paths = [name].flat();

	const runMatcher = locateOptions => {
		if (typeof name !== 'function') {
			return (0,locate_path__WEBPACK_IMPORTED_MODULE_2__.locatePathSync)(paths, locateOptions);
		}

		const foundPath = name(locateOptions.cwd);
		if (typeof foundPath === 'string') {
			return (0,locate_path__WEBPACK_IMPORTED_MODULE_2__.locatePathSync)([foundPath], locateOptions);
		}

		return foundPath;
	};

	const matches = [];
	// eslint-disable-next-line no-constant-condition
	while (true) {
		const foundPath = runMatcher({...options, cwd: directory});

		if (foundPath === findUpStop) {
			break;
		}

		if (foundPath) {
			matches.push(node_path__WEBPACK_IMPORTED_MODULE_0__.resolve(directory, foundPath));
		}

		if (directory === stopAt || matches.length >= limit) {
			break;
		}

		directory = node_path__WEBPACK_IMPORTED_MODULE_0__.dirname(directory);
	}

	return matches;
}

async function findUp(name, options = {}) {
	const matches = await findUpMultiple(name, {...options, limit: 1});
	return matches[0];
}

function findUpSync(name, options = {}) {
	const matches = findUpMultipleSync(name, {...options, limit: 1});
	return matches[0];
}




/***/ }),

/***/ "./node_modules/locate-path/index.js":
/*!*******************************************!*\
  !*** ./node_modules/locate-path/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   locatePath: () => (/* binding */ locatePath),
/* harmony export */   locatePathSync: () => (/* binding */ locatePathSync)
/* harmony export */ });
/* harmony import */ var node_process__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:process */ "node:process");
/* harmony import */ var node_path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:path */ "node:path");
/* harmony import */ var node_fs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:fs */ "node:fs");
/* harmony import */ var node_url__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! node:url */ "node:url");
/* harmony import */ var p_locate__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! p-locate */ "./node_modules/p-locate/index.js");






const typeMappings = {
	directory: 'isDirectory',
	file: 'isFile',
};

function checkType(type) {
	if (Object.hasOwnProperty.call(typeMappings, type)) {
		return;
	}

	throw new Error(`Invalid type specified: ${type}`);
}

const matchType = (type, stat) => stat[typeMappings[type]]();

const toPath = urlOrPath => urlOrPath instanceof URL ? (0,node_url__WEBPACK_IMPORTED_MODULE_3__.fileURLToPath)(urlOrPath) : urlOrPath;

async function locatePath(
	paths,
	{
		cwd = node_process__WEBPACK_IMPORTED_MODULE_0__.cwd(),
		type = 'file',
		allowSymlinks = true,
		concurrency,
		preserveOrder,
	} = {},
) {
	checkType(type);
	cwd = toPath(cwd);

	const statFunction = allowSymlinks ? node_fs__WEBPACK_IMPORTED_MODULE_2__.promises.stat : node_fs__WEBPACK_IMPORTED_MODULE_2__.promises.lstat;

	return (0,p_locate__WEBPACK_IMPORTED_MODULE_4__["default"])(paths, async path_ => {
		try {
			const stat = await statFunction(node_path__WEBPACK_IMPORTED_MODULE_1__.resolve(cwd, path_));
			return matchType(type, stat);
		} catch {
			return false;
		}
	}, {concurrency, preserveOrder});
}

function locatePathSync(
	paths,
	{
		cwd = node_process__WEBPACK_IMPORTED_MODULE_0__.cwd(),
		type = 'file',
		allowSymlinks = true,
	} = {},
) {
	checkType(type);
	cwd = toPath(cwd);

	const statFunction = allowSymlinks ? node_fs__WEBPACK_IMPORTED_MODULE_2__.statSync : node_fs__WEBPACK_IMPORTED_MODULE_2__.lstatSync;

	for (const path_ of paths) {
		try {
			const stat = statFunction(node_path__WEBPACK_IMPORTED_MODULE_1__.resolve(cwd, path_), {
				throwIfNoEntry: false,
			});

			if (!stat) {
				continue;
			}

			if (matchType(type, stat)) {
				return path_;
			}
		} catch {}
	}
}


/***/ }),

/***/ "./node_modules/p-limit/index.js":
/*!***************************************!*\
  !*** ./node_modules/p-limit/index.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ pLimit)
/* harmony export */ });
/* harmony import */ var yocto_queue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! yocto-queue */ "./node_modules/yocto-queue/index.js");


function pLimit(concurrency) {
	if (!((Number.isInteger(concurrency) || concurrency === Number.POSITIVE_INFINITY) && concurrency > 0)) {
		throw new TypeError('Expected `concurrency` to be a number from 1 and up');
	}

	const queue = new yocto_queue__WEBPACK_IMPORTED_MODULE_0__["default"]();
	let activeCount = 0;

	const next = () => {
		activeCount--;

		if (queue.size > 0) {
			queue.dequeue()();
		}
	};

	const run = async (fn, resolve, args) => {
		activeCount++;

		const result = (async () => fn(...args))();

		resolve(result);

		try {
			await result;
		} catch {}

		next();
	};

	const enqueue = (fn, resolve, args) => {
		queue.enqueue(run.bind(undefined, fn, resolve, args));

		(async () => {
			// This function needs to wait until the next microtask before comparing
			// `activeCount` to `concurrency`, because `activeCount` is updated asynchronously
			// when the run function is dequeued and called. The comparison in the if-statement
			// needs to happen asynchronously as well to get an up-to-date value for `activeCount`.
			await Promise.resolve();

			if (activeCount < concurrency && queue.size > 0) {
				queue.dequeue()();
			}
		})();
	};

	const generator = (fn, ...args) => new Promise(resolve => {
		enqueue(fn, resolve, args);
	});

	Object.defineProperties(generator, {
		activeCount: {
			get: () => activeCount,
		},
		pendingCount: {
			get: () => queue.size,
		},
		clearQueue: {
			value: () => {
				queue.clear();
			},
		},
	});

	return generator;
}


/***/ }),

/***/ "./node_modules/p-locate/index.js":
/*!****************************************!*\
  !*** ./node_modules/p-locate/index.js ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ pLocate)
/* harmony export */ });
/* harmony import */ var p_limit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! p-limit */ "./node_modules/p-limit/index.js");


class EndError extends Error {
	constructor(value) {
		super();
		this.value = value;
	}
}

// The input can also be a promise, so we await it.
const testElement = async (element, tester) => tester(await element);

// The input can also be a promise, so we `Promise.all()` them both.
const finder = async element => {
	const values = await Promise.all(element);
	if (values[1] === true) {
		throw new EndError(values[0]);
	}

	return false;
};

async function pLocate(
	iterable,
	tester,
	{
		concurrency = Number.POSITIVE_INFINITY,
		preserveOrder = true,
	} = {},
) {
	const limit = (0,p_limit__WEBPACK_IMPORTED_MODULE_0__["default"])(concurrency);

	// Start all the promises concurrently with optional limit.
	const items = [...iterable].map(element => [element, limit(testElement, element, tester)]);

	// Check the promises either serially or concurrently.
	const checkLimit = (0,p_limit__WEBPACK_IMPORTED_MODULE_0__["default"])(preserveOrder ? 1 : Number.POSITIVE_INFINITY);

	try {
		await Promise.all(items.map(element => checkLimit(finder, element)));
	} catch (error) {
		if (error instanceof EndError) {
			return error.value;
		}

		throw error;
	}
}


/***/ }),

/***/ "./node_modules/path-exists/index.js":
/*!*******************************************!*\
  !*** ./node_modules/path-exists/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   pathExists: () => (/* binding */ pathExists),
/* harmony export */   pathExistsSync: () => (/* binding */ pathExistsSync)
/* harmony export */ });
/* harmony import */ var node_fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:fs */ "node:fs");


async function pathExists(path) {
	try {
		await node_fs__WEBPACK_IMPORTED_MODULE_0__.promises.access(path);
		return true;
	} catch {
		return false;
	}
}

function pathExistsSync(path) {
	try {
		node_fs__WEBPACK_IMPORTED_MODULE_0__.accessSync(path);
		return true;
	} catch {
		return false;
	}
}


/***/ }),

/***/ "./node_modules/pkg-dir/index.js":
/*!***************************************!*\
  !*** ./node_modules/pkg-dir/index.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   packageDirectory: () => (/* binding */ packageDirectory),
/* harmony export */   packageDirectorySync: () => (/* binding */ packageDirectorySync)
/* harmony export */ });
/* harmony import */ var node_path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:path */ "node:path");
/* harmony import */ var find_up__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! find-up */ "./node_modules/find-up/index.js");



async function packageDirectory({cwd} = {}) {
	const filePath = await (0,find_up__WEBPACK_IMPORTED_MODULE_1__.findUp)('package.json', {cwd});
	return filePath && node_path__WEBPACK_IMPORTED_MODULE_0__.dirname(filePath);
}

function packageDirectorySync({cwd} = {}) {
	const filePath = (0,find_up__WEBPACK_IMPORTED_MODULE_1__.findUpSync)('package.json', {cwd});
	return filePath && node_path__WEBPACK_IMPORTED_MODULE_0__.dirname(filePath);
}


/***/ }),

/***/ "./node_modules/yocto-queue/index.js":
/*!*******************************************!*\
  !*** ./node_modules/yocto-queue/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Queue)
/* harmony export */ });
/*
How it works:
`this.#head` is an instance of `Node` which keeps track of its current value and nests another instance of `Node` that keeps the value that comes after it. When a value is provided to `.enqueue()`, the code needs to iterate through `this.#head`, going deeper and deeper to find the last value. However, iterating through every single item is slow. This problem is solved by saving a reference to the last value as `this.#tail` so that it can reference it to add a new value.
*/

class Node {
	value;
	next;

	constructor(value) {
		this.value = value;
	}
}

class Queue {
	#head;
	#tail;
	#size;

	constructor() {
		this.clear();
	}

	enqueue(value) {
		const node = new Node(value);

		if (this.#head) {
			this.#tail.next = node;
			this.#tail = node;
		} else {
			this.#head = node;
			this.#tail = node;
		}

		this.#size++;
	}

	dequeue() {
		const current = this.#head;
		if (!current) {
			return;
		}

		this.#head = this.#head.next;
		this.#size--;
		return current.value;
	}

	clear() {
		this.#head = undefined;
		this.#tail = undefined;
		this.#size = 0;
	}

	get size() {
		return this.#size;
	}

	* [Symbol.iterator]() {
		let current = this.#head;

		while (current) {
			yield current.value;
			current = current.next;
		}
	}
}


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,